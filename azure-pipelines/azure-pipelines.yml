# SAP MTA Application 
# Builds and deploys an SAP HTML5 Application as an MTA

trigger:
- master
- test
- dev

pool:
  vmImage: ubuntu-latest

stages:

## Build
## -----
- stage: Build
  displayName: Dev-Build and Publish
  jobs:
    - job: BuildAndPublish
      displayName: Environment Setup & Build
      steps:
      
      - task: ShellScript@2
        inputs:
          scriptPath: './azure-pipelines/setup_env.sh'
        displayName: 'Configure App environment variables'

        # This bash step defines appVersion and mtaID variables by parsing the mta.yaml file
      - bash :  |
          pip install shyaml
          echo "##vso[task.setvariable variable=appVersion;isOutput=true]$(cat mta.yaml | shyaml get-value version)"         
          echo "##vso[task.setvariable variable=mtaID;isOutput=true]$(cat mta.yaml | shyaml get-value ID)"
        name: appVars
        displayName: 'Read build time variables'
        
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x' 
        displayName: 'Install Node.js'

      - script: |
          npm install
        displayName: 'Install dependencies'

      - script: |
          npm install -g mbt @ui5/cli
        displayName: 'Install Cloud MTA Build Tool (MBT)'

      - script: |
          mbt build -p=cf
        displayName: 'Run mbt build'

      - task: PublishPipelineArtifact@1
        inputs:
          #Default location & name of MTA Archive from Cloud MTA Build
          targetPath: '$(Build.Repository.LocalPath)/mta_archives/$(appVars.mtaID)_$(appVars.appVersion).mtar'  
          artifact: $(appVars.mtaID)
          publishLocation: 'pipeline'

## Test
## -----
- stage: Test
  displayName: 'Tests'
  dependsOn: Build
  jobs:
    - job: Test1
      displayName: 'Run mock tests 1'
      steps:
        - script: |
            echo "Test 1 Done"

    - job: Test2
      displayName: 'Run mock tests 2'
      steps:
        - script: |
            echo "Test 2 Done"

    - job: Test3
      displayName: 'Run mock npm audits'
      steps:
        - script: |
            echo "npm audits done"

## Deploy
## -----
- stage: Deploy
  displayName: 'Deploy App'
  dependsOn:
  - Build 
  - Test

  jobs:
    - deployment: DeployApp
      displayName: 'Deploy App'
      variables:
        BuildAndPublishMtaID: $[stageDependencies.Build.BuildAndPublish.outputs['appVars.mtaID'] ]
        BuildAndPublishAppVersion: $[stageDependencies.Build.BuildAndPublish.outputs['appVars.appVersion'] ]
      environment: 'test'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: none

            - task: DownloadPipelineArtifact@2
              displayName: 'Download Pipeline Artifact'
              inputs:
                targetPath: '$(Pipeline.Workspace)'

            - bash: |
                cf --help
                wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
                echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
                sudo apt-get update
                sudo apt-get install cf-cli
              displayName: 'Install the cf CLI'

            - bash: 'cf install-plugin multiapps -f'
              displayName: 'Install Dependency'

            - bash: 'cf login -a $(apiUrl) -u $(devUser) -p $(devPassword) -o $(orgName) -s $(devOrg) '
              displayName: 'CF Login'
            
            - bash: |
                echo  $(BuildAndPublishMtaID)
                echo $(BuildAndPublishAppVersion)
              displayName: 'Display vars'

            - bash: |
                cd $(Pipeline.Workspace)/$(BuildAndPublishMtaID)
                cf deploy $(BuildAndPublishMtaID)_$(BuildAndPublishAppVersion).mtar
              displayName: 'CF Deploy'
