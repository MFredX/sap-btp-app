 # Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:
  - template: global.yaml

pool:
  vmImage: ubuntu-latest

stages:

## Build
## -----
- stage: Build
  displayName: Build and Publish
  jobs:
    - job: BuildAndPublish
      displayName: Environment Setup & Build
      steps:
      - bash : |
          pip install shyaml
          echo "##vso[task.setvariable variable=appVersion;isoutput=true]$(cat mta.yaml | shyaml get-value version)"
          echo "##vso[task.setvariable variable=appName;isoutput=true]$(cat mta.yaml | shyaml get-value ID)"
        displayName: 'Read build time vars'

      - task: NodeTool@0
        inputs:
          versionSpec: '10.x' 
        displayName: 'Install Node.js'

      - script: |
          npm install
        displayName: 'Install dependencies'

      - script: |
          npm install -g mbt @ui5/cli
        displayName: 'Install Cloud MTA Build Tool (MBT)'

      - script: |
          mbt build -p=cf
        displayName: 'Run mbt build'

      - task: PublishPipelineArtifact@1
        inputs:
          #Default location & name of MTA Archive from Cloud MTA Build
          targetPath: '$(Build.Repository.LocalPath)/mta_archives/$(appName)_$(appVersion).mtar'  
          artifact: 'SAP-BTP-SAPUI5'
          publishLocation: 'pipeline'

## Deploy
## -----
- stage: Test
  displayName: 'Tests'
  dependsOn: Build
  jobs:
    - job: Test1
      displayName: 'Run mock tests 1'
      steps:
        - script: |
            echo "Test 1 Done"

    - job: Test2
      displayName: 'Run mock tests 2'
      steps:
        - script: |
            echo "Test 2 Done"

    - job: Test3
      displayName: 'Run mock npm audits'
      steps:
        - script: |
            echo "npm audits done"

## Deploy
## -----
- stage: Deploy
  displayName: 'Deploy App'
  dependsOn: Test
  jobs:
    - job: Deploy
      steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          displayName: 'Download Pipeline Artifact'
          inputs:
            targetPath: '$(Pipeline.Workspace)'

        - bash: |
            cf --help
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf-cli
          displayName: 'Install the cf CLI'

        - bash: 'cf install-plugin multiapps -f'
          displayName: 'Install Dependency'

        - bash: 'cf login -a $(apiUrl) -u $(devUser) -p $(devPassword) -o $(orgName) -s $(devOrg) '
          displayName: 'CF Login'

        - bash: |
            cd $(Pipeline.Workspace)/$(appName)^^ 
            cf deploy $(appName)_$(appVersion).mtar
          displayName: 'CF Deploy' #cf deploy $(appName)_$(appVersion).mtar


# steps:
# - task: DownloadPipelineArtifact@2
#   displayName: 'Download Pipeline Artifact'
#   inputs:
#     artifactName: '$(appID)'
# steps:
# - bash: 'cf install-plugin multiapps -f'
#   displayName: 'Install Dependency'
#Your build pipeline references a secret variable named ‘dev-user’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘dev-password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
# variables:
#   api-url: 'https://api.cf.ap21.hana.ondemand.com'
#   org-name: '922c6e7ctrial'
#   dev-org: 'dev'


# steps:
# - bash: |
#    cd _sap-ui5-first/$(appID)
   
#    cf deploy $(appID)_$(version).mtar
#   displayName: 'CF Deploy'


