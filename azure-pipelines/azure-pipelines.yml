# SAP MTA Application 
# Builds and deploys an SAP HTML5 Application as an MTA

trigger:
- master
- test
- dev


variables:
  appVersion: 0.0.1
  mtaID: dev-sap-btp-sapui511 #TODO : Pick these vars up dynamically

pool:
  vmImage: ubuntu-latest

stages:

## Build
## -----
- stage: Build
  displayName: Dev-Build and Publish
  jobs:
    - job: BuildAndPublish
      displayName: Environment Setup & Build
      steps:
      - bash: |
          #!/bin/sh
          BRANCH=$(Build.SourceBranchName)
          if [ $BRANCH = "dev" ]
          then
              echo "Configuring dev environment"
              echo "Deleting mta.yaml,ui5-deploy.yaml,xs-security.json,webapp/manifest.json...."
              rm mta.yaml
              rm ui5-deploy.yaml
              rm xs-security.json
              rm webapp/manifest.json
              echo "Delete complete"
              echo "Moving env specific files"
              cp env-properties/dev/dev-mta.yaml mta.yaml
              cp env-properties/dev/dev-ui5-deploy.yaml ui5-deploy.yaml 
              cp env-properties/dev/dev-xs-security.json xs-security.json 
              cp env-properties/dev/dev-manifest.json webapp/manifest.json

          elif [ $BRANCH = "test" ]
          then
              echo "Configuring test environment"
          elif [ $BRANCH = "master" ]
          then
              echo "Configuring prod environment"
          else
              echo "No suitable env found"
          fi
        displayName: 'Setup Environment Variables'

      - bash : |
          pip install shyaml
          echo "##vso[task.setvariable variable=appVersion;isoutput=true]$(cat mta.yaml | shyaml get-value version)"
          echo "##vso[task.setvariable variable=mtaID;isoutput=true]$(cat mta.yaml | shyaml get-value ID)"
        displayName: 'Read build time vars'

      - task: NodeTool@0
        inputs:
          versionSpec: '10.x' 
        displayName: 'Install Node.js'

      - script: |
          npm install
        displayName: 'Install dependencies'

      - script: |
          npm install -g mbt @ui5/cli
        displayName: 'Install Cloud MTA Build Tool (MBT)'

      - script: |
          mbt build -p=cf
        displayName: 'Run mbt build'

      - task: PublishPipelineArtifact@1
        inputs:
          #Default location & name of MTA Archive from Cloud MTA Build
          targetPath: '$(Build.Repository.LocalPath)/mta_archives/$(mtaID)_$(appVersion).mtar'  
          artifact: $(mtaID)
          publishLocation: 'pipeline'

## Test
## -----
- stage: Test
  displayName: 'Tests'
  dependsOn: Build
  jobs:
    - job: Test1
      displayName: 'Run mock tests 1'
      steps:
        - script: |
            echo "Test 1 Done"

    - job: Test2
      displayName: 'Run mock tests 2'
      steps:
        - script: |
            echo "Test 2 Done"

    - job: Test3
      displayName: 'Run mock npm audits'
      steps:
        - script: |
            echo "npm audits done"

## Deploy
## -----
- stage: Deploy
  displayName: 'Deploy App'
  dependsOn: Test
  jobs:
    - deployment: DeployApp
      displayName: 'Deploy App'
      environment: 'test'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: none

            - task: DownloadPipelineArtifact@2
              displayName: 'Download Pipeline Artifact'
              inputs:
                targetPath: '$(Pipeline.Workspace)'

            - bash: |
                cf --help
                wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
                echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
                sudo apt-get update
                sudo apt-get install cf-cli
              displayName: 'Install the cf CLI'

            - bash: 'cf install-plugin multiapps -f'
              displayName: 'Install Dependency'

            - bash: 'cf login -a $(apiUrl) -u $(devUser) -p $(devPassword) -o $(orgName) -s $(devOrg) '
              displayName: 'CF Login'

            - bash: |
                cd $(Pipeline.Workspace)/$(mtaID)
                cf deploy $(mtaID)_$(appVersion).mtar
              displayName: 'CF Deploy'
